rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2024, 2, 8);
    // }

    // match /databases/{database}/documents {
    //   match /puzzles/{puzzleId} {
    //     allow read, write: if request.auth.uid == resource.data.userId;
    //   }
    // }

      // Make sure the uid of the requesting user matches name of the user
      // document. The wildcard expression {userId} makes the userId variable
      // available in rules.
      match /puzzles/{documents=**} {
        allow read: if request.time < timestamp.date(2024, 2, 8);
        // uncomment to allow reading of all puzzles regardless of user
        // allow read: if request.time < timestamp.date(2024, 2, 8);
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
      }
      // match /puzzles/{puzzleId} {
      //   allow read: if request.time < timestamp.date(2024, 2, 8);
      //   allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      //   allow create: if request.auth != null;
      // }
  }
}
